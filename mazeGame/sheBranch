import java.util.*;

public class Search {
	public static void DFS(Agent ag, Maze mz) {

	}
public static void BFS(Maze maze)
	{

		System.out.println("THIS IS BFS");
		System.out.println();
		
		Queue que = new Queue();
		pair [] solutions = new pair[maze.maze.length* maze.maze[0].length];
		int solIndex=0;

		int NumberofNodesExpanded=0;
		int depth =0;
		int maxfrontier= 0;
		int tempmax=0;
		
		
		//push the start position on to the stack
		pair start = new pair(maze.startX, maze.startY, -1,-1, depth);
		que.add( start );

		tempmax=tempmax+1;
			
		if(tempmax> maxfrontier)
			maxfrontier=tempmax;
	
		
		while( !que.isEmpty())
		{
			pair curr = que.remove();
			solutions[solIndex]= curr;
			solIndex=solIndex+1;
			
			tempmax=tempmax-1;
			if(curr.first == maze.endX && curr.second == maze.endY)
			{
				System.out.println("Found the End!!!");
				System.out.println("Number of Nodes Expanded: " + NumberofNodesExpanded);
				System.out.println("Max tree depth searched: " + depth);
				System.out.println("Max frontier size: "+maxfrontier);
				System.out.println();
				
				printSol(maze, solutions, curr);
				
				return;
			}
			

			
			//add neighbors
			if( !maze.visited[curr.first][curr.second] )
			{
				//update visited
				maze.visited[curr.first][curr.second]=true;
				
				NumberofNodesExpanded=NumberofNodesExpanded+1;
			
				//add left neighbor
				if( canMove( maze,curr, "left") )
				{
					pair temp = new pair(curr.first-1, curr.second, curr.first, curr.second,  curr.ht+1);
					que.add(temp);
					tempmax=tempmax+1;
					if(tempmax> maxfrontier)
						maxfrontier=tempmax;
					
					if(depth < curr.ht+1)
						depth = curr.ht+1;
					
				}
				
				//add down neighbor
				if( canMove(maze, curr, "down") )
				{
					pair temp = new pair(curr.first, curr.second+1, curr.first, curr.second, curr.ht+1);
					que.add(temp);
					tempmax=tempmax+1;
					if(tempmax> maxfrontier)
						maxfrontier=tempmax;
					
					if(depth < curr.ht+1)
						depth = curr.ht+1;

				}
				
				//add up neighbor
				if( canMove(maze, curr, "up") )
				{
					pair temp = new pair(curr.first, curr.second-1, curr.first, curr.second,  curr.ht+1);
					que.add(temp);
					tempmax=tempmax+1;
					if(tempmax> maxfrontier)
						maxfrontier=tempmax;

					if(depth < curr.ht+1)
						depth = curr.ht+1;
				}


				//add right neighbor
				if( canMove(maze, curr, "right") )
				{
					pair temp = new pair(curr.first+1, curr.second, curr.first, curr.second, curr.ht+1);
					que.add(temp);
					tempmax=tempmax+1;
					if(tempmax> maxfrontier)
						maxfrontier=tempmax;

					
					if(depth < curr.ht+1)
						depth = curr.ht+1;
				}
			}
		}
	}

/*Greedy-First Search Algorithm that takes a Maze (by reference) in as a parameter.
	 *The Maze class is defined in maze.java
	 */
	public static void GBFS(Maze maze )
	{
		System.out.println("THIS IS GREEDY Best-First Search");
		System.out.println();
		
	
		Queue Gque = new Queue();
		pair [] solutions = new pair[maze.maze.length*2* maze.maze[0].length];
		int solIndex=0;
		
		int NumberofNodesExpanded=0;
		int depth =0;
		int maxfrontier= 0;
	
		
		//push the start position on to the stack
		pair start = new pair(maze.startX, maze.startY, -1,-1, depth);
		Gque.add( start );

		ArrayList< pair > frontier = new ArrayList< pair>();
		
		while( !Gque.isEmpty() )
		{
			pair curr = Gque.remove();
			
			solutions[solIndex]= curr;
			solIndex=solIndex+1;
			

			if(curr.first == maze.endX && curr.second == maze.endY)
			{
				//reachedEnd = true;
				System.out.println("Found the End!!!");
				System.out.println("Number of Nodes Expanded: " + (NumberofNodesExpanded-3) );
				System.out.println("Max tree depth searched: " + depth);
				System.out.println("Max frontier size: "+maxfrontier);
				System.out.println();
				
				printSol(maze, solutions, curr);
				
				return;
			}
			
			if(Gque.isEmpty() && !frontier.isEmpty())
			{
				
				pair min2 = findMinFrontier( maze, frontier);
				Gque.add(min2);
			
				if(frontier.size()> maxfrontier)
					maxfrontier=frontier.size();
			
				if(depth < min2.ht+1)
					depth = min2.ht+1;
			}

			
			//add neighbors
			if( !maze.visited[curr.first][curr.second] )
			{
				//update visited
				maze.visited[curr.first][curr.second]=true;
				
				//
				NumberofNodesExpanded=NumberofNodesExpanded+1;
				
				
				
				//add left neighbor
				if( canMove( maze,curr, "left") )
				{
					pair temp = new pair(curr.first-1, curr.second, curr.first, curr.second,  curr.ht+1);
					frontier.add(temp);
					
				}
				
				//add down neighbor
				if( canMove(maze, curr, "down") )
				{
					pair temp = new pair(curr.first, curr.second+1, curr.first, curr.second, curr.ht+1);
					frontier.add(temp);

				}
				
				//add up neighbor
				if( canMove(maze, curr, "up") )
				{
					pair temp = new pair(curr.first, curr.second-1, curr.first, curr.second,  curr.ht+1);
					frontier.add(temp);
				}


				//add right neighbor
				if( canMove(maze, curr, "right") )
				{
					pair temp = new pair(curr.first+1, curr.second, curr.first, curr.second, curr.ht+1);
					frontier.add(temp);
				}

				
				pair min = findMinFrontier( maze, frontier);
				
				Gque.add(min);
	
			
				if(frontier.size()> maxfrontier)
					maxfrontier=frontier.size();
			
				if(depth < min.ht+1)
					depth = min.ht+1;	
			}	
		}
	}
	public static void AStar(Agent ag, Maze mz) {
		//Sanity check..
		if(ag == null || mz == null) {
			System.out.println("Astar Search fail because of invalid input arguments.");
			return;
		}
		char[][] board = mz.getMaze();
		boolean[][] visited = new boolean[mz.getRowLen()][mz.getColLen()];
		PriorityQueue<Pair> pq = new PriorityQueue<Pair>(mz.getRowLen() * mz.getColLen(), new Comparator<Pair>(){
			@Override
			public int compare(Pair a, Pair b) {
				if(a.equals(b)) {
					return 0;
				}
				return a.getGx() + a.getHx() < b.getGx() + b.getHx()? -1 : 1;
			}
		});
		Pair last = null; //The pair reference which refer to the last step of the game to reach the goal
		visited[mz.getStart().getY()][mz.getStart().getX()] = true;
		pq.add(mz.getStart());
		while(mz.getGoals().size() != 0) {
			Pair cur = pq.poll();
			Pair up = ag.moveUp(cur, visited);
			Pair down = ag.moveDown(cur, visited);
			Pair left = ag.moveLeft(cur, visited);
			Pair right = ag.moveRight(cur, visited);
			if(up != null) {
				last = mz.checkGoal(up)? up : last;
				visited[up.getY()][up.getX()] = true;
				up.setParent(cur);
				pq.add(up);
			}
			if(down != null) {
				last = mz.checkGoal(down)? down : last;
				visited[down.getY()][down.getX()] = true;
				down.setParent(cur);
				pq.add(down);
			}
			if(left != null) {
				last = mz.checkGoal(left)? left : last;
				visited[left.getY()][left.getX()] = true;
				left.setParent(cur);
				pq.add(left);
			}
			if(right != null) {
				last = mz.checkGoal(right)? right : last;
				visited[right.getY()][right.getX()] = true;
				right.setParent(cur);
				pq.add(right);
			}
		}
		//record the optimal path to the agent 
		Pair cur = last;
		List<Pair> path = ag.getPath();
		while(cur != null) {
			path.add(cur);
			cur = cur.getParent();
		}
		Maze.printMaze(mz, ag);
	}
}